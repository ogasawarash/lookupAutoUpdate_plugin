!function(e){function r(u){if(t[u])return t[u].exports;var d=t[u]={exports:{},id:u,loaded:!1};return e[u].call(d.exports,d,d.exports,r),d.loaded=!0,d.exports}var t={};return r.m=e,r.c=t,r.p="",r(0)}([function(e,r,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}var d=t(1),a=u(d),s=t(5),n=u(s),l=t(6),o=u(l),f=t(8),i=u(f),c=t(9),p=u(c),y=t(11),v=u(y),h=t(13),_=u(h),q=t(14),g=u(q),A=t(15),b=u(A),M=t(16),P=u(M),k=t(17),m=u(k),K=t(18),O=u(K),R=t(19),G=u(R),j=t(20),T=u(j),L={rest:{},ui:{}};L.rest.getRecord=a["default"],L.rest.getRecords=n["default"],L.rest.getAllRecordsByQuery=o["default"],L.rest.postRecord=i["default"],L.rest.postRecords=p["default"],L.rest.postAllRecords=v["default"],L.rest.putRecord=_["default"],L.rest.putRecords=g["default"],L.rest.putAllRecords=b["default"],L.rest.deleteRecords=P["default"],L.rest.deleteAllRecords=m["default"],L.rest.deleteAllRecordsByQuery=O["default"],L.rest.upsertRecord=G["default"],L.rest.upsertRecords=T["default"],window.kintoneUtility=L},function(e,r,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var d=t(2),a=u(d),s=t(3),n=u(s),l=t(4),o=u(l);r["default"]=function(e){if(!e||!e.app)return(0,a["default"])(n["default"].required.app);if(!e||!e.id)return(0,a["default"])(n["default"].required.id);var r={app:e.app,id:e.id},t=!!e.isGuest;return(0,o["default"])("/k/v1/record","GET",r,t)}},function(e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r["default"]=function(e){return new kintone.Promise(function(r,t){t({status:"error",message:e})})}},function(e,r){e.exports={required:{app:'"params" needs "app".',id:'"params" needs "id".',idOrUpdateKey:'"params" needs "id" or "updateKey".',updateKey:'"params" needs "updateKey", "updateKey.field" and "updateKey.value".'},shouldBeArray:{records:'"records" should be Array.',ids:'"ids" should be Array.'},overLength:{recordsLessThan2000:'"records" should be less than or equal to 2,000.',recordsLessThan1500:'"records" should be less than or equal to 1,500.',ids:'"ids.length" should be less than or equal to 2,000.'},emptyArray:{records:'"records" is empty. "records" needs to contain one record at least.',ids:'"ids" is empty. "ids" needs to contain one id at least.'},notUniqueField:'"params.updateKey" is not unique field.'}},function(e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r["default"]=function(e,r,t,u){return kintone.api(kintone.api.url(e,u),r,t).then(function(e){return e})}},function(e,r,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var d=t(2),a=u(d),s=t(3),n=u(s),l=t(4),o=u(l);r["default"]=function(e){if(!e||!e.app)return(0,a["default"])(n["default"].required.app);var r={app:e.app,query:e.query||"",fields:e.fields||[],totalCount:e.totalCount||!1},t=!!e.isGuest;return(0,o["default"])("/k/v1/records","GET",r,t)}},function(e,r,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var d=t(2),a=u(d),s=t(3),n=u(s),l=t(4),o=u(l),f=t(7),i=u(f),c=function p(e,r,t){if(!e||!e.app)return(0,a["default"])(n["default"].required.app);var u=i["default"].getRecords,d=r||[];t=t||0;var s={app:e.app,query:e.query?e.query+" limit "+u+" offset "+t:"limit "+u+" offset "+t,fields:e.fields||[]},l=!!e.isGuest;return(0,o["default"])("/k/v1/records","GET",s,l).then(function(r){return d=d.concat(r.records),r.records.length<u?{records:d}:p(e,d,t+u)})};r["default"]=c},function(e,r){e.exports={records:100,getRecords:500,upsertRecords:1500,bulk:2e3}},function(e,r,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var d=t(2),a=u(d),s=t(3),n=u(s),l=t(4),o=u(l);r["default"]=function(e){if(!e||!e.app)return(0,a["default"])(n["default"].required.app);var r={app:e.app,record:e.record},t=!!e.isGuest;return(0,o["default"])("/k/v1/record","POST",r,t)}},function(e,r,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var d=t(2),a=u(d),s=t(3),n=u(s),l=t(10),o=u(l),f=t(4),i=u(f),c=t(7),p=u(c);r["default"]=function(e){if(!e||!e.app)return(0,a["default"])(n["default"].required.app);if(!Array.isArray(e.records))return(0,a["default"])(n["default"].shouldBeArray.records);if(e.records&&e.records.length>p["default"].bulk)return(0,a["default"])(n["default"].overLength.recordsLessThan2000);if(e.records&&e.records.length<1)return(0,a["default"])(n["default"].emptyArray.records);var r=(0,o["default"])({app:e.app,records:e.records,method:"POST"}),t=!!e.isGuest;return(0,i["default"])("/k/v1/bulkRequest","POST",r,t)}},function(e,r,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var d=t(7),a=u(d);r["default"]=function(e){for(var r=a["default"].records,t={requests:[]},u=e.records?e.records.length:e.ids.length,d=Math.ceil(u/r),s=0,n=0;n<d;n++){var l={method:e.method,api:"/k/v1/records.json",payload:{app:e.app}};e.records&&(l.payload.records=e.records.slice(s,s+r)),e.ids&&(l.payload.ids=e.ids.slice(s,s+r)),t.requests.push(l),s+=r}return t}},function(e,r,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var d=t(2),a=u(d),s=t(3),n=u(s),l=t(9),o=u(l),f=t(12),i=u(f),c=t(7),p=u(c);r["default"]=function(e){if(!e||!e.app)return(0,a["default"])(n["default"].required.app);if(!Array.isArray(e.records))return(0,a["default"])(n["default"].shouldBeArray.records);if(e.records&&e.records.length<1)return(0,a["default"])(n["default"].emptyArray.records);var r=[],t=function u(t){t=t||0;var d=!!e.isGuest,a={app:e.app,records:(0,i["default"])(e.records,t),isGuest:d};return(0,o["default"])(a).then(function(d){return r=r.concat(d.results),t+=p["default"].bulk,e.records.length<=t?{results:r}:u(t)})};return t()}},function(e,r,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var d=t(7),a=u(d);r["default"]=function(e,r){var t=e.length-r>a["default"].bulk?r+a["default"].bulk:e.length;return e.slice(r,t)}},function(e,r,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var d=t(2),a=u(d),s=t(3),n=u(s),l=t(4),o=u(l);r["default"]=function(e){if(!e||!e.app)return(0,a["default"])(n["default"].required.app);if(!e.id&&!e.updateKey)return(0,a["default"])(n["default"].required.idOrUpdateKey);var r={app:e.app,record:e.record};e.revision&&(r.revision=e.revision),e.id?r.id=e.id:e.updateKey&&(r.updateKey=e.updateKey);var t=!!e.isGuest;return(0,o["default"])("/k/v1/record","PUT",r,t)}},function(e,r,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var d=t(2),a=u(d),s=t(3),n=u(s),l=t(10),o=u(l),f=t(4),i=u(f),c=t(7),p=u(c);r["default"]=function(e){if(!e||!e.app)return(0,a["default"])(n["default"].required.app);if(!Array.isArray(e.records))return(0,a["default"])(n["default"].shouldBeArray.records);if(e.records&&e.records.length>p["default"].bulk)return(0,a["default"])(n["default"].overLength.recordsLessThan2000);if(e.records&&e.records.length<1)return(0,a["default"])(n["default"].emptyArray.records);var r=(0,o["default"])({app:e.app,records:e.records,method:"PUT"}),t=!!e.isGuest;return(0,i["default"])("/k/v1/bulkRequest","POST",r,t)}},function(e,r,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var d=t(2),a=u(d),s=t(3),n=u(s),l=t(14),o=u(l),f=t(12),i=u(f),c=t(7),p=u(c);r["default"]=function(e){if(!e||!e.app)return(0,a["default"])(n["default"].required.app);if(!Array.isArray(e.records))return(0,a["default"])(n["default"].shouldBeArray.records);if(e.records&&e.records.length<1)return(0,a["default"])(n["default"].emptyArray.records);var r=[],t=function u(t){t=t||0;var d=!!e.isGuest,a={app:e.app,records:(0,i["default"])(e.records,t),isGuest:d};return(0,o["default"])(a).then(function(d){return r=r.concat(d.results),t+=p["default"].bulk,e.records.length<=t?{results:r}:u(t)})};return t()}},function(e,r,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var d=t(2),a=u(d),s=t(3),n=u(s),l=t(10),o=u(l),f=t(4),i=u(f),c=t(7),p=u(c);r["default"]=function(e){if(!e||!e.app)return(0,a["default"])(n["default"].required.app);if(!Array.isArray(e.ids))return(0,a["default"])(n["default"].shouldBeArray.ids);if(e.ids&&e.ids.length>p["default"].bulk)return(0,a["default"])(n["default"].overLength.ids);if(e.ids&&e.ids.length<1)return(0,a["default"])(n["default"].emptyArray.ids);var r=(0,o["default"])({app:e.app,ids:e.ids,method:"DELETE"});e.revisions&&(r.revisions=e.revisions);var t=!!e.isGuest;return(0,i["default"])("/k/v1/bulkRequest","POST",r,t)}},function(e,r,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var d=t(2),a=u(d),s=t(3),n=u(s),l=t(16),o=u(l),f=t(12),i=u(f),c=t(7),p=u(c);r["default"]=function(e){if(!e||!e.app)return(0,a["default"])(n["default"].required.app);if(!Array.isArray(e.ids))return(0,a["default"])(n["default"].shouldBeArray.ids);if(e.ids&&e.ids.length<1)return(0,a["default"])(n["default"].emptyArray.ids);var r=[],t=function u(t){t=t||0;var d=!!e.isGuest,a={app:e.app,ids:(0,i["default"])(e.ids,t),isGuest:d};return(0,o["default"])(a).then(function(d){return r=r.concat(d.results),t+=p["default"].bulk,e.ids.length<=t?{results:r}:u(t)})};return t()}},function(e,r,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var d=t(6),a=u(d),s=t(17),n=u(s);r["default"]=function(e){return e.fields=["$id"],(0,a["default"])(e).then(function(r){var t=[],u=r.records;if(!u||!u.length)return{};for(var d=0;d<u.length;d++)t.push(u[d].$id.value);var a={app:e.app,ids:t,isGuest:e.isGuest};return(0,n["default"])(a).then(function(e){return e})})}},function(e,r,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var d=t(2),a=u(d),s=t(3),n=u(s),l=t(5),o=u(l),f=t(8),i=u(f),c=t(13),p=u(c);r["default"]=function(e){"use stiirict";return e&&e.app?e.updateKey&&e.updateKey.field&&(e.updateKey.value||""===e.updateKey.value)?(e.query=e.updateKey.field+' = "'+e.updateKey.value+'"',(0,o["default"])(e).then(function(r){return""===e.updateKey.value||r.records.length<1?(e.record[e.updateKey.field]={value:e.updateKey.value},(0,i["default"])(e)):1===r.records.length?(0,p["default"])(e):(0,a["default"])(n["default"].notUniqueField)})):(0,a["default"])(n["default"].required.updateKey):(0,a["default"])(n["default"].required.app)}},function(e,r,t){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0});var d=t(2),a=u(d),s=t(3),n=u(s),l=t(10),o=u(l),f=t(6),i=u(f),c=t(11),p=(u(c),t(15)),y=(u(p),t(4)),v=u(y),h=t(7),_=u(h);r["default"]=function(e){if(!e||!e.app)return(0,a["default"])(n["default"].required.app);if(!Array.isArray(e.records))return(0,a["default"])(n["default"].shouldBeArray.records);if(e.records&&e.records.length>_["default"].upsertRecords)return(0,a["default"])(n["default"].overLength.recordsLessThan1500);if(e.records&&e.records.length<1)return(0,a["default"])(n["default"].emptyArray.records);var r=function(e,r){if(""===r.updateKey.value)return!1;for(var t=0;t<e.length;t++)if(e[t][r.updateKey.field].value===r.updateKey.value)return!0;return!1},t=function(r,t){var u=(0,o["default"])({app:e.app,records:r,method:"POST"}),d=(0,o["default"])({app:e.app,records:t,method:"PUT"}),a={requests:u.requests.concat(d.requests)},s=!!e.isGuest;return(0,v["default"])("/k/v1/bulkRequest","POST",a,s)};return(0,i["default"])(e).then(function(u){for(var d=u.records,a=e.records,s=[],n=[],l=0;l<a.length;l++)if(r(d,a[l]))s.push(a[l]);else{var o=a[l].record;o[a[l].updateKey.field]={value:a[l].updateKey.value},n.push(o)}return t(n,s)})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,